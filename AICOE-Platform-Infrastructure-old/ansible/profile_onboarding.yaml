- hosts: bastion
  become: yes

  vars:
    team_info: "{{ lookup('file', 'team_info.json') }}"
    bucket: "{{ cluster_name }}-storage"

  tasks:
    - name: create profiles and collaborators
      block:
        - debug:
            var: team_info

        - name: ensure profiles directory exists
          file:
            path: "/home/{{ username }}/src/profiles"
            state: directory
            mode: g+rw
            owner: "{{ username }}"
            group: "{{ username }}"

        - name: ensure adhoc_onboarding directory exists
          file:
            path: "/home/{{ username }}/src/profiles/adhoc_onboarding"
            state: directory
            mode: g+rw
            owner: "{{ username }}"
            group: "{{ username }}"

        - name: Copy adhoc profile onboarding files to bastion host
          template:
            src: "{{ item }}"
            dest: "/home/{{ username }}/src/profiles/adhoc_onboarding/{{ item | basename }}"
          with_fileglob:
            - "adhoc_user_onboarding/*"

        - name: Copy adhoc profile onboarding files to bastion host
          template:
            src: "{{ item }}"
            dest: "/home/{{ username }}/src/profiles/adhoc_onboarding/{{ item | basename }}"
          with_fileglob:
            - "adhoc_user_onboarding/utils/*"
        
        - name: ensure streamlit secrets directory exists
          file:
            path: "/home/{{ username }}/src/profiles/adhoc_onboarding/.streamlit"
            state: directory
            mode: g+rw
            owner: "{{ username }}"
            group: "{{ username }}"
        
        - name: Copy streamlit admin secrets
          copy:
            src: secrets/streamlit-secrets.toml
            dest: "/home/{{ username }}/src/profiles/adhoc_onboarding/.streamlit/secrets.toml"

        - name: wait for kubeflow pods to be running (may encounter delays due to pull rate limit)
          become: yes
          become_user: "{{ username }}"
          shell: "kubectl get pods -n kubeflow -o json"
          register: kfpods
          until:
            - kfpods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
          retries: 360
          delay: 10

        # Check to make sure the profile controller pods are ready
        - name: ensure kubeflow pipelines profile controller pod is running
          become: yes
          become_user: "{{ username }}"
          shell: "kubectl get pods -n kubeflow --selector=app=kubeflow-pipelines-profile-controller -o json"
          register: profpipe
          until:
            - profpipe.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
          retries: 360
          delay: 10

        - name: ensure profiles deployment pods are running
          become: yes
          become_user: "{{ username }}"
          shell: "kubectl get pods -n kubeflow --selector=service.istio.io/canonical-name=profiles-deployment -o json"
          register: profcont
          until:
            - profcont.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
          retries: 360
          delay: 10

        - name: add existing profile namespace to principals list or if file does not exists, create an empty list
          become: yes
          become_user: "ec2-user"
          shell: "kubectl get authorizationpolicies.security.istio.io -n kubeflow bind-ml-pipeline-nb -o jsonpath='{.spec.rules[*].from[*].source.principals[*]}' | tr -d '\"' | tr -d '[' | tr -d ']' | tr ' ' ',' || echo ''"
          register: principals_list

        - name: initialize principals list for authpolicy principals and remove empty element
          set_fact:
            profile_sa_list: "{{ principals_list.stdout.split(',')|select()|list }}"

        - name: create profile per team using team lead email
          include_tasks: files/team_onboarding/create_profiles.yaml
          loop: "{{ team_info | json_query('teams') }}"

        - debug:
            var: profile_sa_list

        - name: template out profile authorization policy file
          template:
            src: profile-authpolicy.yaml
            dest: "/home/{{ username }}/src/profiles/profile-authpolicy.yaml"

        - name: apply authpolicy template
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:
            state: present
            src: "/home/{{ username }}/src/profiles/profile-authpolicy.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3

      tags: profiles