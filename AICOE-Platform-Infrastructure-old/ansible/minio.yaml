- hosts: bastion
  become: yes
  
  vars:
    timestamp: "{{ ansible_date_time.iso8601_basic }}"
    tf_state_bucket: "{{ lookup('env', 'TF_VAR_tf_state_bucket') }}"

  tasks:

    - name: deploy minio
      block:
        # Prepare minio directory on bastion
        # Get files ready on bastion
        - name: copy minio files to bastion
          template:
            src: "{{ item }}"
            dest: "/home/{{ username }}/src/minio/{{ item | basename }}"
          with_fileglob:
            - "minio/*"

        # MinIO plugin
        - name: download kubectl-minio plugin for v4.4.26
          get_url:
            url: https://github.com/minio/operator/releases/download/v4.4.26/kubectl-minio_4.4.26_linux_amd64
            dest: /usr/local/bin
            mode: 777

        - name: initialize minio operator
          become: yes
          become_user: "{{ username }}"
          shell: "/usr/local/bin/kubectl-minio_4.4.26_linux_amd64 init"
        
        # Create secret, tenant, and virtual service resources for MinIO Tenant
        - name: check if minio-creds-secret exists
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s_info:
            kind: Secret
            namespace: cserver-minio
            name: minio-creds-secret
          register: secretcheck
          vars:
            ansible_python_interpreter: /usr/bin/python3 
        - debug:
            var: secretcheck.resources

        - name: create accesskey for minio-creds-secret
          become: yes
          become_user: "{{ username }}"
          shell: "echo -n {{ team }} | base64"
          register: minio_admin_access
          when: secretcheck.resources == []

        - debug:
            var: minio_admin_access.stdout

        - name: create secretkey for minio-creds-secret
          become: yes
          become_user: "{{ username }}"
          shell: "echo -n {{ team }}_{{ ansible_date_time.iso8601_basic }} | base64"
          register: minio_admin_secret
          when: secretcheck.resources == []

        - debug:
            var: minio_admin_secret.stdout

        - name: apply minio tenant creation 
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:      
            state: present
            src: "/home/{{ username }}/src/minio/minio-tenant.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: wait for cserver-minio pods to be running
          become: yes
          become_user: "{{ username }}"
          shell: "kubectl get pods -n cserver-minio -o json" ## filter for minio pods
          register: miniopods
          until: 
            - miniopods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
          retries: 180
          delay: 5

        - name: apply minio virtual service 
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:      
            state: present
            src: "/home/{{ username }}/src/minio/minio-vs.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3

      tags:
        minio_tenant

    - name: create minio buckets in team namespaces
      block:
        
        - name: create service account for minio
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: sa-minio
                namespace: cserver-minio
                annotations:
                  eks.amazonaws.com/role-arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ cluster_name }}-minio-role"
          vars:
            ansible_python_interpreter: /usr/bin/python3
        
        - name: apply cluster role for minio 
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:      
            state: present
            src: "/home/{{ username }}/src/minio/minio-cluster-role.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3 

        - name: create configmap for minio
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: minio-params
                namespace: cserver-minio
              data:
                s3bucket: "{{ platform_metadata_bucket_name }}"
                clustername: "{{ cluster_name }}"
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: wait for tenant to be fully ready before it can be properly configured
          pause:
            minutes: 1

        - name: run minio pod for creating minio buckets, policies, users
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:      
            state: present
            src: "/home/{{ username }}/src/minio/minio-pod.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: wait for minio tasks to complete
          become: yes
          become_user: "{{ username }}"
          shell: kubectl get pod -n cserver-minio minio-pod -o json
          register: miniojob
          until: 
            - miniojob.stdout|from_json|json_query('status.phase') == "Succeeded"
          retries: 360
          delay: 10
        - debug:
            var: miniojob.stdout|from_json|json_query('status.phase') == "Succeeded"
        
        - name: get logs of completed minio job
          become: yes
          become_user: "{{ username }}"
          shell: kubectl logs -n cserver-minio minio-pod
          register: miniologs

        - name: save logs to bastion
          copy:
            content: "{{ miniologs.stdout }}"
            dest: "/home/{{ username }}/src/minio/logs_{{ timestamp }}.logs"

        - name: delete pod
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:
            state: absent
            kind: Pod
            namespace: cserver-minio
            name: minio-deployment
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: apply minio-sync-secret-controller 
          become: yes
          become_user: "{{ username }}"
          kubernetes.core.k8s:      
            state: present
            src: "/home/{{ username }}/src/minio/minio-secret-sync-controller.yaml"
          vars:
            ansible_python_interpreter: /usr/bin/python3 

        - name: Scale default minio to 0
          become: yes
          become_user: "{{ username }}"
          community.kubernetes.k8s_scale:
            api_version: v1
            kind: Deployment
            name: minio
            namespace: kubeflow
            replicas: 0
          vars:
            ansible_python_interpreter: /usr/bin/python3 

      tags:
        minio_buckets